///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Copyright Nurve Networks LLC 2009
// 
// Filename: CHAM_AVR_SYSTEM_V010.h
//
// Original Author: Andre' LaMothe
// 
// Last Modified: 4.27.08
//
// Description: This file contains generic defines, macros, types for all the library modules and system related 
// code and utility functions.
//
// 
// 
//
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES ///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// watch for multiple inclusions
#ifndef CHAM_AVR_SYSTEM_IDRIVINO
#define CHAM_AVR_SYSTEM_IDRIVINO

// support C++ compilers
 #ifdef __cplusplus
 extern "C" {
 #endif 
 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MACROS /////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// macros to manipulate bits
#define SET_BIT(value, bit)    value = ( (value) | (1 << (bit)) ) 
#define SET(bit)               (1 << (bit))
#define RESET_BIT(value, bit)  value = ((value) &  (~(1 << (bit)))) 
#define RESET(bit)             (~(1 << (bit))))
#define WRITE_BIT(value, bit_num, bit_val) value = (((value) &  (~(1 << (bit_num)))) | ( (bit_val) << (bit_num) ) )
#define SETPORTBITS(b7, b6, b5, b4, b3, b2, b1, b0)  ( (b7 << 7) | (b6 << 6)| (b5 << 5)| (b4 << 4)| (b3 << 3)| (b2 << 2)| (b1 << 1)| (b0 << 0) )

// conversion macros
#define HEX_TO_DEC(n) (((n >= '0') & (n <= '9')) ? (n - '0') : (((n >= 'A') & (n <= 'F')) ? (n - 'A' + 10) : 0 ) )

// a more useful random function
#define RAND_RANGE(x,y) ( (x) + (rand()%((y)-(x)+1)))

// AVR RESET MACROS ///////////////////////////////////////////////////////////////////////////////////////////////////

#define AVR_Soft_Reset()    \
do                          \
{                           \
    wdt_enable(WDTO_15MS);  \
    for(;;)                 \
    {                       \
    }                       \
} while(0)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DEFINES/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// define CPU frequency in Mhz here if not defined in Makefile 
#define F_CPU 16000000UL

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TYPES/CLASSES //////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// basic unsigned types
typedef unsigned short USHORT;
typedef unsigned short WORD;
typedef unsigned char  BYTE;
typedef unsigned char UCHAR;
typedef unsigned long  QUAD;
typedef unsigned int   UINT;

// generic input device data record type, helps get back data from various multidata calls
typedef struct gid_event_type
    {

    int x,y,z;    // position data
    int buttons;  // buttons, bit encoded
                  // bit4 = right-side button
                  // bit3 = left-side button
                  // bit2 = center/scrollwheel button
                  // bit1 = right button
                  // bit0 = left button

    } gid_event, *gid_event_ptr;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS ////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern unsigned long f_cpu;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EXTERNALS //////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROTOTYPES /////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// time and counting
void Delay_Clocks(long count);
void _delay_s(int sec);

// conversion
long atoi2(char *string);

// system reset
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));
int Reset_Master(void);
int Reset_Prop(void);


 // end support for C++ compilers
 #ifdef __cplusplus
 }
 #endif 


// end multiple inclusions 
#endif
