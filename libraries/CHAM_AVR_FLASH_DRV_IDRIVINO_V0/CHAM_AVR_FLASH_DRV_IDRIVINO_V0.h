///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Copyright Nurve Networks LLC 2009
// 
// Filename: CHAM_AVR_FLASH_DRV_V010.h
//
// Original Author: Andre' LaMothe
// 
// Last Modified: 8.20.08
//
// Description: This file contains generic defines, macros, types for all the library modules and system related 
// code and utility functions.
//
// 
// 
// 
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES ///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// watch for multiple inclusions
#ifndef CHAM_AVR_FLASH_DRV_IDRIVINO
#define CHAM_AVR_FLASH_DRV_IDRIVINO

// support C++ compilers
#ifdef __cplusplus
extern "C" {
#endif 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MACROS /////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define FLASH_ADDR_TO_BLOCK( n ) (n >> 12)
#define FLASH_ADDR_TO_BLOCK64( n ) (n >> 16)
#define FLASH_BLOCK_TO_ADDR( n ) (n << 12)
#define FLASH_BLOCK_TO_ADDR64( n ) (n << 16)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DEFINES/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// set the define for the proper FLASH installed on Chameleon
#define AT26F004         4 // numeric codes for flash version
#define AT26DF081A       8

// set type of FLASH ROM currently installed in Chameleon (8MBit) for conditional compilation of code
#define FLASH_ROM        AT26DF081A // AT26F004, AT26DF081A

// Atmel 2F004/8xxx series basic commands
#define WRITE_ENABLE     0x06
#define WRITE_DISABLE    0x04
#define READ_STATUS      0x05
#define WRITE_STATUS     0x01
#define READ_DATA        0x03

#define SEQ_PROGRAM      0xAD  
#define BYTE_PROGRAM     0x02 

#define BLOCK_ERASE4     0x20
#define BLOCK_ERASE32    0x52
#define BLOCK_ERASE64    0xD8

#define SECTOR_ERASE     0x20    

#define CHIP_ERASE       0x60 
#define JEDEC_ID         0x9F

#define PROTECT_SECTOR   0x36 
#define UNPROTECT_SECTOR 0x39 

// custom commands, not part of chip spec, just used here, start at 0xF0
#define UNPROTECT_CHIP   0xF0

#define TCSH             100   //in nanosecs

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TYPES/CLASSES //////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS ////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// conditional compilation for FLASH memory variants
#if (FLASH_ROM == AT26F004)

// we could use PGM memory for these and or do it algorithmically, but this is cleaner for now
// 11 sectors [64K, 64K, 64K, 64K, 64K, 64K, 64K, 32K, 8K, 8k, 16K ]
//            |<------- (7) 64K sectors ------->|  1      2     1 

    #define NUM_FLASH_ROM_SECTORS 11

    extern long sector_addresses[NUM_FLASH_ROM_SECTORS];

#endif


#if (FLASH_ROM == AT26DF081A)

// we could use PGM memory for these and or do it algorithmically, but this is cleaner for now
// 19 sectors [64K, 64K, 64K, ..., 64K, 64K, 64K, 64K, 16K, 8K, 8k, 32K ]
//            |<----------- (15) 64K sectors -------->| 1     2     1 

    #define NUM_FLASH_ROM_SECTORS 19

    extern long sector_addresses[NUM_FLASH_ROM_SECTORS];

#endif


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EXTERNALS //////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROTOTYPES /////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int Flash_Open();
int Flash_Close();
int Flash_Write(unsigned long flash_start_addr, unsigned char *buffer, unsigned int num_bytes);
int Flash_Read(unsigned long flash_start_addr, unsigned char *buffer, unsigned int num_bytes);
int Flash_Erase(unsigned int block);
int Flash_Erase64(unsigned int block);
void Flash_ChipErase(void);

// end support for C++ compilers
#ifdef __cplusplus
}
#endif 


// end multiple inclusions 
#endif
